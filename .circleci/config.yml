version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          when: on_fail  
          name: Destroy Env
          command: |
            aws cloudformation delete-stack --stack-name dev-stack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name dev-stack-${CIRCLE_WORKFLOW_ID:0:5}

  configure_infrastructure:
    docker: 
      - image: python:3
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["39:34:39:bd:63:00:24:8f:dc:f2:ef:b9:75:28:94:ea"]
      - run:
          name: Install Ansible
          command: | 
            python3 -m pip install ansible 

      - run: 
          name: Run playbook and configure server
          command: ansible-playbook -i inventory main.yaml

  smoke_test:
    docker: 
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run: 
          name: smoke test
          command: | 
            URL="https://blog.udacity.com/"
            if curl -s --head ${URL}
            then
              return 0
            else 
              return 1
            fi

  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml
          command: | 
            aws cloudformation deploy \
            --template-file bucket.yaml \
            --stack-name stack-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Copy file
          command: |
            aws s3 cp index.html s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7}
  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yaml \
            --stack-name prod-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"


  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  mainWF:
    jobs: 
      - create_and_deploy_frontend
      - promote_to_production:
          requires:
            - create_and_deploy_frontend
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
